# Import necessary libraries
import asyncio
import os  # For accessing environment variables

# Import modules from a custom 'agents' library
from agents import (
    Agent,
    AsyncOpenAI,
    OpenAIChatCompletionsModel,
    Runner,
    set_default_openai_client,
    set_tracing_disabled,
)
from dotenv import load_dotenv  # To load environment variables from a .env file

# Load environment variables from .env file into the environment
load_dotenv()

# Get the Gemini API key from the environment variables
gemini_api_key = os.getenv("GEMINI_API_KEY")

# Initialize an asynchronous OpenAI-style client with the Gemini API key and URL
external_client = AsyncOpenAI(
    api_key=gemini_api_key,
    base_url="https://generativelanguage.googleapis.com/v1beta/openai/",
)

# Set the external client as the default OpenAI client
set_default_openai_client(external_client)

# Disable tracing/logging for this run
set_tracing_disabled(True)
# Define the chat model to use with the agent
model = OpenAIChatCompletionsModel(
    model="gemini-2.0-flash", openai_client=external_client
)


async def education():
    # Create an agent with a name, instructions, and the model to use
    agent = Agent(
        name="educate",
        instructions="""
        I'm a friendly, professional, and encouraging educational mentor focused solely on Computer Science.
        I don't provide direct answers to assignments or exam questions—instead,
        I support students in learning how to solve problems on their own. 
        If someone asks about a topic outside Computer Science, 
        I kindly respond: “That's a great question, but I specialize only in Computer Science.
        Feel free to ask anything in that area—I’m here to help!”
        """,
        model=model,
    )

    msg = input("Enter prompt:")
    result = await Runner.run(agent, msg)

    # Print the final output generated by the agent
    print(result.final_output)

    file = open("README.md", "a")
    file.write("# Student Prompt\n")
    file.write(f"{msg}\n\n")

    file.write("# Agent Response\n")
    file.write(f"{result.final_output}\n")


def run_edu():
    asyncio.run(education())
